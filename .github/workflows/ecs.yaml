name: Deploy to ECR

on:
  push:
    branches:
      - 'ecs'

env:
  ECS_SERVICE: adora-prod-service                 # set this to your Amazon ECS service name
  ECS_CLUSTER: adora-prod                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: scripts/infra/task-definition.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: adora-ms 

jobs:
  
  build:
    
    name: Build Image
    runs-on: ubuntu-latest

    steps:

    - name: Check out code
      uses: actions/checkout@v2

    - name: Create env file
      run: |
        touch .env
        echo DB_MAIN_HOST=${{ secrets.DB_MAIN_HOST }} >> .env
        echo DB_MAIN_PORT=${{ secrets.DB_MAIN_PORT }} >> .env
        echo DB_MAIN_USER=${{ secrets.DB_MAIN_USER }} >> .env
        echo DB_MAIN_PASSWORD=${{ secrets.DB_MAIN_PASSWORD }} >> .env
        echo DB_MAIN_DATABASE=${{ secrets.DB_MAIN_DATABASE }} >> .env
        echo DB_MAIN_SCHEMA=${{ secrets.DB_MAIN_SCHEMA }} >> .env
        echo PORT=${{ secrets.PORT }} >> .env
        echo DATABASE_SSL=true >> .env
        cat .env
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-ecr
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: adora
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "Pushing image to ECR... $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG "
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Log out of Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition adora_prod_family --query taskDefinition > scripts/infra/task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-ecr.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    # - name: executing remote ssh commands using ssh key
    #   uses: appleboy/ssh-action@master
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     ECR_REPOSITORY: adora
    #     IMAGE_TAG: ${{ github.sha }}
    #   with:
    #     host: ${{ secrets.AWS_HOST }}
    #     username: ${{ secrets.AWS_USER }}
    #     key: ${{ secrets.AWS_KEY }}
    #     envs: ECR_REGISTRY,ECR_REPOSITORY,IMAGE_TAG
    #     script:  |
    #       $(aws ecr get-login --no-include-email --region us-east-1)
    #       docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    #       docker stop adora
    #       docker run --rm -d -p 3100:3100 --name adora $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG